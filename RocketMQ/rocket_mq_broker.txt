
RocketMQ源码之Broker分析 - 知乎
https://zhuanlan.zhihu.com/p/427602828				finish,

Broker 主要负责消息的存储，投递和查询以及保证服务的高可用。

读到了, 初始化配置信息, 读完了, 一般般,



【RocketMQ | 源码分析】Broker启动过程(超详细) - 掘金
https://juejin.cn/post/7218576561842143291

读完一遍, 不值得再次阅读

RocketMq 源码解读-Broker（1）-CSDN博客
https://blog.csdn.net/qq_14853889/article/details/131232986

读完一遍, 其讲了拉取消息的过程, 不值得再次阅读

RocketMQ源码解析――Broker_broker源码-CSDN博客
https://blog.csdn.net/weixin_41083377/article/details/120027378

读完一遍, 不值得再次阅读

RocketMQ 源码分析――Broker - 阿里云开发者社区
https://developer.aliyun.com/article/1337958

值得再次阅读, ********************************
其内部有几张图可以瞄瞄,
RocketMQ 主要存储的文件包括 Commitlog 文件、 ConsumeQueue 文件、 IndexFile。

亮点分析：NRS与NRC的功能号设计			NettyRemotingServer, NettyRemotingClient,
亮点分析：同步双写数倍性能提升的CompletableFuture
亮点分析：Commitlog写入时使用可重入锁还是自旋锁？		可重入锁,ReentrantReadWriteLock, 自旋锁,compareAndSet,
亮点分析：零拷贝技术之MMAP提升文件读写性能			getFileChannel(), this.fileChannel.map(MapMode.READ_WRITE, 0, fileSize);
亮点分析：堆外内存机制						ByteBuffer.allocateDirect(fileSize);


RocketMQ底层原理和源码解析-腾讯云开发者社区-腾讯云
https://cloud.tencent.com/developer/article/1745923

刷盘和主从同步?
一般般, 可以再读一遍,

RocketMq之Broker源码分析-腾讯云开发者社区-腾讯云
https://cloud.tencent.com/developer/article/1645897			finish,

一般般, 可以再读一遍,
ConsumeQueue 有几张图, 可以瞄一瞄,
其内部有几张图可以瞄瞄,


47. 源代码解读-RocketMQ-broker - 阿里云开发者社区
https://developer.aliyun.com/article/507913

不值得再次阅读,


1.翻一翻源代码, 
1.1. Broker启动流程,				running,-------------------------------------,

初始化一大堆的成员变量,

初始化元数据,

initializeMessageStore,

ConsumeQueue,
BatchConsumeQueue,

这两个类不知道有什么区别,

初始化 messageStore.putMessageHookList 列表

scheduleMessageService, 这个是要干什么的?

correctDelayOffset, 这个方法是干嘛的?



2.启动后有哪些线程, 

2.1. 调度任务有哪一些,


事务消息相关,

有没有一些 RpcHook 的类

1. messageStore start,
1.1. 起一个线程来同步两台电脑的数据?
2. timerMessageStore start,
3. remotingServer start,
4. popMessageProcessor start,
5. 一条消息的发送和处理流程,

2.2. 查看启动后线程相关, 并给其对上, 
      1 "AllocateMappedFileService
		在 DefaultMessageStore.start 方法里面创建, 看字面意思是提前创建 map file, 用一个队列来顺序创建,
      1 "AsyncAppender-Worker-DefaultSiftingAppender				日志线程,
      1 "AsyncAppender-Worker-RocketmqBrokerSiftingAppender
      1 "AsyncAppender-Worker-RocketmqCommercialSiftingAppender
      1 "AsyncAppender-Worker-RocketmqPopSiftingAppender
      1 "AsyncAppender-Worker-RocketmqProtectionSiftingAppender
      2 "AsyncAppender-Worker-RocketmqRebalanceLockSiftingAppender
      1 "AsyncAppender-Worker-RocketmqRemotingSiftingAppender
      1 "AsyncAppender-Worker-RocketmqStatsSiftingAppender
      1 "AsyncAppender-Worker-RocketmqStoreErrorSiftingAppender
      1 "AsyncAppender-Worker-RocketmqStoreSiftingAppender			日志线程
      1 "AsyncAppender-Worker-RocketmqTieredStoreSiftingAppender
      1 "AsyncAppender-Worker-RocketmqTrafficSiftingAppender
      1 "AsyncAppender-Worker-RocketmqTransactionSiftingAppender
      1 "AsyncAppender-Worker-RocketmqWaterMarkSiftingAppender			日志线程
      1 "Attach Listener							应该是自带的, 可以先不用管,
      1 "BroadcastOffsetManager					BrokerController.startBasicService -> broadcastOffsetManager,
      1 "BrokerControllerScheduledThread1			BrokerController.initializeResources -> scheduledExecutorService,
      1 "BrokerFastFailureScheduledThread1			BrokerFastFailure.scheduledExecutorService -> 看名字是清理过期请求的,
      1 "brokerOutApi_thread_1					BrokerOuterAPI.brokerOuterExecutor -> 线程池, 查询版本, 心跳, 注册broker, 
      1 "brokerOutApi_thread_2
      1 "brokerOutApi_thread_3
      1 "brokerOutApi_thread_4
      1 "BrokerStatsThread1					对 broker 端的系统指标进行统计
      1 "ClientHousekeepingScheduledThread1			将超时的客户端连接, 进行关闭,
      1 "ClientHouseKeepingService				NettyRemotingClient.timer -> broker 对外的连接的一个线程, 周期性的运行一些内容,
      1 "ColdDataCgCtrService					冷数据清理线程,
      1 "ColdDataCheckService					先跳过, 不管,
      1 "ColdDataPullRequestHoldService				如果一个请求拉取了 cold 的数据, 这个请求将会进入这个冷数据队列,
      1 "CommercialStatsThread1					统计用的,
      1 "compactionSchedule_1					压缩的意思,
      1 "compactionSchedule_2
      1 "compactionSchedule_3
      1 "compactionSchedule_4
      1 "compactionSchedule_5
      1 "compactionSchedule_6
      1 "DefaultAcceptSocketService				负载均衡用的,DefaultMessageStore -> ... -> DefaultAcceptSocketService,
      1 "DefaultConsumerIdsChangeListener_1			消费者 ID 变更监听器,
      1 "FileWatchService					监听 SslContext 变更相关,
      1 "FlushConsumeQueueService				DefaultMessageStore -> FlushConsumeQueueService,
      1 "FlushDiskWatcher					CommitLog -> GroupCommitRequest 是否超时,
      1 "FlushRealTimeService					CommitLog -> FlushRealTimeService 实时刷盘,
      1 "GroupTransferService					DefaultHAService -> groupTransferService, 负载均衡的, 在 master 和 slave 之间同步数据?
      1 "HAConnectionStateNotificationService			DefaultHAService -> haConnectionStateNotificationService, 负载均衡的,
      1 "logback-1						日志线程
      1 "NettyClientScan_thread_1				netty client 线程
      1 "NettyClientScan_thread_2
      1 "NettyClientScan_thread_3
      1 "NettyClientScan_thread_4
      1 "NettyClientSelector_1
      1 "NettyClientWorkerThread_1				NettyRemotingClient.defaultEventExecutorGroup, DefaultEventExecutorGroup, 客户端线程池, 处理 NettyEncoder, NettyDecoder, NettyClientHandler 这些 handler 的内容,
      2 "NettyEventExecutor					处理 netty 的各个事件, IDLE, CLOSE, CONNECT, EXCEPTION
      2 "NettyNIOBoss_1
      2 "NettyServerScheduler_1					NettyRemotingServer.scheduledExecutorService, -> printRemotingCodeDistribution,
      1 "org.apache.rocketmq.store.util.PerfCounter$Ticks	看代码是键值太多, 会被踢掉,
      1 "PopBufferMergeService					消息的另一个消费方式, 默认是 pull 方式,
      2 "PopLongPollingService					像是某个业务的, 先不管,
      1 "PopReviveService_0					PopReviveService 服务中实现的， 这也是一个后台服务， 会定时检查哪些 CK 没有被完全 Ack， 然后根据 CK 将这个 CK 包含的全部消息重新恢复到重试 Topic 中
      1 "PopReviveService_1
      1 "PopReviveService_2
      1 "PopReviveService_3
      1 "PopReviveService_4
      1 "PopReviveService_5
      1 "PopReviveService_6
      1 "PopReviveService_7
      1 "PullRequestHoldService					长轮询请求管理线程，挂起的拉取请求会在这里进行保存。每等待一段时间（长轮询/短轮询等待时间）会检查挂起的请求中是否有可以进行拉取的数据。
      1 "QueueLockManager					PopMessageProcessor 里面的内容, 先不管
      1 "ReputMessageService					DefaultMessageStore.reputMessageService,
      1 "ScheduleMessageServicePersistThread1			ScheduleMessageService.scheduledPersistService, 定期持久化配置文件,
      1 "ScheduleMessageTimerThread_1				ScheduleMessageService.deliverExecutorService, 分发延迟消息的,
      1 "ScheduleMessageTimerThread_10
      1 "ScheduleMessageTimerThread_11
      1 "ScheduleMessageTimerThread_12
      1 "ScheduleMessageTimerThread_13
      1 "ScheduleMessageTimerThread_14
      1 "ScheduleMessageTimerThread_15
      1 "ScheduleMessageTimerThread_16
      1 "ScheduleMessageTimerThread_17
      1 "ScheduleMessageTimerThread_18
      1 "ScheduleMessageTimerThread_2
      1 "ScheduleMessageTimerThread_3
      1 "ScheduleMessageTimerThread_4
      1 "ScheduleMessageTimerThread_5
      1 "ScheduleMessageTimerThread_6
      1 "ScheduleMessageTimerThread_7
      1 "ScheduleMessageTimerThread_8
      1 "ScheduleMessageTimerThread_9
      2 "ServerHouseKeepingService				NettyRemotingServer 里面的内容,
      1 "StoreCleanQueueScheduledThread1			DefaultMessageStore 里面, 清理过期的文件之类的,
      1 "StoreScheduledThread1					DefaultMessageStore.scheduledExecutorService, 执行一些周期性的任务,
      1 "StoreStatsService					StoreStatsService.run, 
      3 "TimerDequeueGetMessageService				定时器的相关内容,
      1 "TimerDequeueGetService					定时器的相关内容,
      3 "TimerDequeuePutMessageService				定时器的相关内容,
      1 "TimerDequeueWarmService				定时器的相关内容,
      1 "TimerEnqueueGetService					定时器的相关内容,
      1 "TimerEnqueuePutService					定时器的相关内容,
      1 "TimerFlushService					定时器的相关内容,
      1 "TimerScheduledThread1					TimeMessageStore.scheduler, 周期性运行的东东,
      1 "TopicQueueMappingCleanService				周期性的清理 TopicQueueMapping,
      1 "TopicRouteInfoManagerScheduledThread1			TopicRouteInfoManager.scheduledExecutorService, 执行一些周期性的任务, updateTopicRouteInfoFromNameServer,
      1 "TransactionalMessageCheckService			顾名思义, 检查事务消息用的,
      1 "TransactionalOpBatchService				批量发送 op message

2.3. 各个代码的相关跟踪, 就差不多这样了,
2.4. 

2.4.1. 客户端发送了一条消息,
2.4.2. broker 收到消息, 如何折腾,
2.4.3. broker 如何把消息推给 consumer,
2.4.4. consumer 如何消费一条消息,


3.消息发送流程, 相关, 涉及到的东东,




