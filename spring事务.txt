https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/transaction.html


二、AOP 术语
AOP 领域中的特性术语：

通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。
连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。
切点（PointCut）: 可以插入增强处理的连接点。
切面（Aspect）: 切面是通知和切点的结合。
引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。
织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。



1. spring 事务有以下四个好处,
1.1. 为不同的事务 API 包装了一个一致性的应用程序模型, 这些不同的事务 API 有 JTA, JDBC, 
1.2. 支持声明式事务管理,
1.3. 提供了简单的 API 用于可编程事务管理,
1.4. 对 Spring 数据访问抽象, 提供了优秀的集成,

1. Spring 事务模型的优点,
数据源有多个, spring 事务也可以包进来,

1.1. Spring 的事务策略由 PlatformTransactionManager 来定义,


1.2. 一个事务定义包含以下几个方面:
1.2.1. Isolation,隔离性,
1.2.2. Propagation,隔离级别,
1.2.3. Timeout, 超时配置,
1.2.4. Read-only, 只读, 不写数据的操作, 只读在某些场景有优化作用, 例如：使用 Hibernate 的时候,
1.2.5. 

PlatformTransactionManager 的几个子类实现,
1.DataSourceTransactionManager,
2.JtaTransactionManager,
3.HibernateTransactionManager


代码解析之类的教程, 可以快速的读一遍,

看到了,
16.4.3 TransactionAwareDataSourceProxy, 代理数据库事务的,
不推荐使用这个类，除非要用到 DataSource 接口,


16.5 Declarative transaction management

Spring Framework’s declarative transaction management works in any environment

可以编写自己的事务处理切片, 与 

什么是嵌套事务,


什么是嵌套事务？
       嵌套是子事务在父事务中执行，子事务是父事务的一部分，在进入子事务之前，父事务建立一个回滚点，叫save point，然后执行子事务，这个子事务的执行也算是父事务的一部分，然后子事务执行结束，父事务继续执行。

	父事务回滚, 子事务也会回滚,
MySQL嵌套事务会发生什么呢?

postgresql中的嵌套事务,

开启一个事务,再开启一个事务, 看一看是如何来实现的,
嵌套事务的实现是基于SAVEPOINT、ROLLBACK TO SAVEPOINT和RELEASE SAVEPOINT的
示例,建立一个保存点并实现:
savepoint insert_a;

rollback to insert_a;

release insert_a;

mysql 不知道支持不支持, 有的资料说 mysql 也有 savepoint, 因此, 有待确认,

TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();

void setRollbackOnly()

Set the transaction rollback-only. 
This instructs the transaction manager that 
	the only possible outcome of the transaction 
	may be a rollback, 
	as alternative to throwing an exception 
	which would in turn trigger a rollback.
这个方法会告诉事务管理者,这个事务只有回滚这一种结果.
作为抛出异常的替代, 而抛出异常会立即触发回滚.


The most important concepts to 
	grasp with regard to the Spring Framework’s declarative transaction support 
	are that this support is enabled via AOP proxies, and that the transactional advice is driven by metadata (currently XML- or annotation-based). 
The combination of AOP with transactional metadata 
	yields an AOP proxy that uses a TransactionInterceptor in conjunction with an appropriate PlatformTransactionManager implementation 
	to drive transactions around method invocations.

掌握 spring 声明式事务管理最重要的概念为, 通过 aop 代理实现.
而事务 advice 由 metadata (xml 或注解驱动)

AOP 结合事务元数据配置, 产生了一个 AOP 代理, AOP 代理使用 TransactionInterceptor 结合 PlatformTransactionManager 实现, 驱动事务在方法前后实现。

spring aop 可参考文档:
https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/aop.html
实现

方法内部的调用还不行, 要通过 service 实例来触发调用,
按这张图来看, 调用顺序为:
caller -> AOP Proxy -> TransactionAdvisor -> Custom Advisor(s) -> Target Method

Target Method -> Custom Advisor(s) -> TransactionAdvisor -> AOP Proxy -> caller


----- UnexpectedRollbackException,


16.5.3 Rolling back a declarative transaction

建议通过抛出异常的方式以实现事务回滚,
默认配置下，只会回滚 RuntimeException 下的异常, 不会回滚 Exception 下的异常,

也可以配置 noRollbackFor, 指定哪些类型的异常不回滚,

16.5.4 Configuring different transactional semantics for different beans

<tx:advice/> 的默认配置为:
Propagation setting is REQUIRED.
Isolation level is DEFAULT.
Transaction is read/write.
Transaction timeout defaults to the default timeout of the underlying transaction system, or none if timeouts are not supported.
Any RuntimeException triggers rollback, and any checked Exception does not.

@Transaction 只对 public 方法有效, 如果要对 protected, private 方法生效, 可以试试 AspectJ 

spring 是建议, 把 @Transactional 注解, 配置在实体类上, 而不是接口上, 
如果注解在接口上, 则只会对基于接口的代理生效。
即有些情况下, 实体类的事务不会生效,

代理模式下, 只有对代理类进行方法调用(public), 才会触发事务拦截.
即自身方法调用, 不会触发这个事务的拦截问题.


@Transactional("order"), 这个里面的 order, 指的是事务的标识符。


可以用 Spring 的注解支持, 把相同的事务配置, 写到相同的 @interface 上,

即 spring 的事务问题, 这里面都有讲,


In Spring-managed transactions, be aware of the difference between physical and logical transactions, 
and how the propagation setting applies to this difference.
spring 管理的事务中, 注意区分物理和逻辑事务的不同,

Required, PROPAGATION_REQUIRED,
两个标注有 @Transactional 的方法, 通过代理类调用, 当内部的那个代理类, 抛出异常时, 会触发 UnexpectedRollbackException, 使得外部的事务一起回滚.

RequiresNew, PROPAGATION_REQUIRES_NEW,
每个事务不会互相影响, 都是一个独立的事务。底层的事务, 可以 commit 或 rollback, 不会影响到外层的事务。

Nested, PROPAGATION_NESTED, 看到了这个地方,
https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/transaction.html#tx-propagation-nested

PROPAGATION_NESTED uses a single physical transaction with multiple savepoints that it can roll back to.

使用了 savepoint 实现多物理事务以实现回滚,

有多个 advise 切面时, 可以通过配置 order 属性, 以实现顺序,

继续看这个 spring 的事务相关的实现, 百望的接口, 

16.6 Programmatic transaction management
https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/transaction.html#tx-propagation-nested


spring 提供了两种编程式事务管理,
1. TransactionTemplate,
2. PlatformTransactionManager,

看到了这个东东, 喵的,

16.8 Transaction bound event
可以通过 @TransactionalEventListener 以实现对 spring 事务的监听, 默认是在事务提交后触发,
BEFORE_COMMIT, 
AFTER_COMMIT (default), 
AFTER_ROLLBACK,
AFTER_COMPLETION,


几个事务的实验, Propagation 的枚举的测试,

REQUIRED(0),			支持当前事务,如果不存在,创建一个,
SUPPORTS(1),			支持当前事务,如果没事务,则没事务,
MANDATORY(2),			支持当前事务,如果当前没事务,则抛出异常,
REQUIRES_NEW(3),		创建一个新事务,如果当前有事务,则暂停,(即用一个新的 jdbc 连接?)
NOT_SUPPORTED(4),		无事务,如果当前存在事务,则暂停当前事务,
NEVER(5),			无事务,如果有事务,则抛出异常,
NESTED(6);			嵌套事务, 用 savepoint 方式来实现, 子事务是父事务的一部分,

事务可暂停,也可恢复,所谓的暂停事务,其实就是一个新的 jdbc connection,

用 172.16.11.130 label 表来测试,

mytest(id, name, age);

CREATE TABLE mytest (
	id int8 NOT NULL,
	name varchar NULL,
	age int4 NULL,
	CONSTRAINT mytest PRIMARY KEY (id)
);

1. postgresql 中, 使用 
SET TRANSACTION READ COMMITTED;

BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;

BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;

begin;

insert into mytest values (1, 'line1', 11);

begin;
# postgresql 中, 再次 begin, 事务没有被提交,

insert into mytest values (2, 'line2', 22);

commit; 
# 此时, 两个事务都提交(即只有一条事务), 另一个事务中可以查到两条插入,

rollback;


=======================================
savepoint 相关,

BEGIN;
    insert into mytest values (1, 'line1', 11);
    SAVEPOINT my_savepoint;
    insert into mytest values (2, 'line2', 22);
    ROLLBACK TO SAVEPOINT my_savepoint;
    insert into mytest values (3, 'line3', 33);
COMMIT;

BEGIN;
    insert into mytest values (4, 'line4', 44);
    SAVEPOINT my_savepoint;
    insert into mytest values (5, 'line5', 55);
    RELEASE SAVEPOINT my_savepoint;
COMMIT;


=======================================

参考这篇文章吧,
https://blog.csdn.net/adai_study/article/details/108379625

腾讯镜像
https://mirrors.cloud.tencent.com/gradle/


psql -h172.16.11.130 -p5432 -Ulabel

http://localhost:8000/gradle-2.14.1-bin.zip

1.1. 找一张表,


https://www.jianshu.com/p/622f60520674
Spring Tx源码解析(一)

https://www.jianshu.com/p/842d739550b2
Spring Tx源码解析(二)

https://www.jianshu.com/p/25b9d022d0c8
Spring Tx源码解析(三)

chatGPT 给的答案

==================================================
6. Spring Boot 事务源码阅读笔记 - 任飞的博客 (renfei.net)

7. Spring事务源码解析（一）-TransactionAwareDataSourceProxy · 青衫烟雨 - 博客园 (cnblogs.com)

8. spring-boot-parent/TransactionAutoConfiguration.java · spring-projects/spring-boot - GitHub (github.com)

9. Spring事务源码解析（汇总）-海底技术哥博客 (cnblogs.com)

10. Spring事务传播行为源码解析 – KevinsBlog (github.io)

11. SpringBoot 事务多数据源源码解析 - Seatak - 博客园 (cnblogs.com)

12. 漫谈 Spring 事务源码解析系列 (上) - Java 技术驿站 (yq.aliyun.com)

13. 漫谈 Spring 事务源码解析系列 (下) - Java 技术驿站 (yq.aliyun.com)

14. Spring 事务源码分析及原理详解 - juejin.cn

15. Spring Boot源码解析 - 之事务 - 微笑的博客 - 博客园 (cnblogs.com)
==================================================

用这个类来解析对应的注解,
TxAdviceBeanDefinitionParser

不过 spring 是如何来访问 AOP 的呢?

看到了这里面的东东,
https://www.jianshu.com/p/842d739550b2

一个注解, 用配置启动事务,
EnableTransactionManagement


第一个问题, UnexpectedRollbackException 与 readOnlyou 相关的源码实现,

TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();


研究一下这几个测试类的实现,

	public void testParticipatingTransactionWithRollbackOnly() throws Exception {
		

AbstractPlatformTransactionManager.java	
	public final void setFailEarlyOnGlobalRollbackOnly(boolean failEarlyOnGlobalRollbackOnly) {

	}
Set whether to fail early in case of the transaction being globally marked as rollback-only.
在事务被全局标识为 readOnly 的情况下, 是否 fail early
Default is "false", only causing an UnexpectedRollbackException at the outermost transaction boundary. 
默认值是 false, 在最外层事务边界, 引起一个 UnexpectedRollbackException.

Switch this flag on to cause an UnexpectedRollbackException as early as the global rollback-only marker has been first detected, 
设置这个标志为 true, 可以在一检测到 global rollback-only marker 时, 就抛出 UnexpectedRollbackException
even from within an inner transaction boundary.
即使是在内部事务边界

Note that, as of Spring 2.0, the fail-early behavior for global rollback-only markers has been unified: 
从 spring 2.0 开始, 为全局只读标识而设的迟早失败行为已经统一:
All transaction managers will by default only cause UnexpectedRollbackException at the outermost transaction boundary. 
所有的事务管理只会在最外层的事务边界引起异常,
This allows, for example, to continue unit tests even after an operation failed and the transaction will never be completed. 
这样可以继续单元测试, 当某个事务失败的情况下,
All transaction managers will only fail earlier if this flag has explicitly been set to "true".

不过是哪个事务失败了, 导致设了这个值?

第一次进入, 是内部的一个事务实现, 而这个内部事务是 setRollbackOnly,

private void processRollback(DefaultTransactionStatus status, boolean unexpected) {

第二次进入,是外层的这个事务, 如果是加上了这个 setRollbackOnly 呢? 最后会发往什么改变呢?




