1.实现一个注解,
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface CheckClientId {
    String value() default "";
}

2.切面的实现,
@Aspect
@Component
@SuppressWarnings({"unused"})
@Order(0)	// 通过这个注解来配置 切面的顺序,
public class CheckClientIdAspect {
    private final String timeOutMessage = "用户已经超时，退出重新登录？";

    @Autowired
    AccessTokenUtils accessTokenUtils;

    @Pointcut("@annotation(com.onlyou.ai.autotrain.web.annotation.CheckClientId)")
    public void annotationPointcut() {

    }

    @Before("annotationPointcut()")
    public void beforePointcut(JoinPoint joinPoint) {
        CustomUserDetails customUserDetails = accessTokenUtils.getUserInfo();
        if (customUserDetails == null) {
            throw new SessionTimeoutRuntimeException(timeOutMessage);
        }
    }
}


2.在对应的方法上,添加这个注解实现,
@CheckClientId
@RequestMapping("/classifyTrainRulePacketList.json")
@ResponseBody
@ApiOperation(value = "理票规则包列表", notes = "理票规则包列表", httpMethod = "GET")
public ResponseVo classifyTrainRulePacketList(@RequestParam Long classifyTrainBranchId,
					  @RequestParam(required = false, defaultValue = "1") int currentPage,
					  @RequestParam(required = false, defaultValue = "10") int pageSize) {



二、AOP 术语
AOP 领域中的特性术语：

通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。
连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。
切点（PointCut）: 可以插入增强处理的连接点。
切面（Aspect）: 切面是通知和切点的结合。
引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。
织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。


https://www.jianshu.com/p/f2dc993b53f3
这个链接里面说的 AOP 的相关术语:
1.关注点（Concern）：指系统中基于功能划分出的一部分，比如示例中的计算器和对它的性能统计
2.


数据结构:


一些操作类:


流程的绘画:









