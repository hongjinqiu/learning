
E:/hongjinqiu/learning/分布式系统原理介绍.pdf

1. 副本, 通常是一个台写入, 多台进行复制,
2. 数据分布方式, 哈希方式, 按数据范围分布, 一致性哈希, 副本与数据分布,
2.1. 副本协议,
	2.1.1. 强一致性, 实践中最难以实现的一种,
	2.1.2. 单调一致性, 任何用户一旦读到某个数据在某次更新后的值，这个用户不会再读到比这个值更旧的值。
	2.1.3. 会话一致性, 任何用户在某一次会话内一旦读到某个数据在某次更新后的值，这个用户在这次会话过程中不会再读到比这个值更旧的值。
	2.1.4. 最终一致性, 最终一致性要求一旦更新成功，各个副本上的数据最终将达到完全一致的状态，但达到完全一致状态所需要的时间不能保障。

衡量分布式系统的指标:
1.3.1. 性能,
1.3.2. 可用性,
1.3.3. 可扩展性,
1.3.4. 一致性,

如何拆解分布式系统的输入数据成为分布式系统的基本问题,
1.数据的分布方式,
1.1. 按哈希方式分布, 扩展性比较差, 当多加机器时, 采取取模的个数大于机器的个数, 集群扩容时, 将部分余数分配到新加入的机器并迁移对应的数据到新机器上,
	数据特征要选好, 当然我们系统的 id 是 uuid,
1.2. 按数据范围分布, 按数据范围分布是另一个常见的数据分布式，将数据按特征值的值域范围划分为不同的区间，使得集群中每台（组）服务器处理不同区间的数据。
	优点就是可以灵活的根据数据量的具体情况拆分原有数据区间,
1.3. 按数据量分布,
1.4. 一致性哈希的基本方式是使用一个哈希函数计算数据或数据特征的哈希值，令该哈希函数的输出值域为一个封闭的环,
每个节点负责处理从自己开始顺时针至下一个节点的全部哈希值域上的数据。
1.5. 一致性哈希的优点在于可以任意动态添加、删除节点，每次添加、删除一个节点仅影响一致性哈希环上相邻的节点。
	添加虚节点的方式, 虚节点的个数一般远大于未来集群中机器的个数.
	操作数据时, 通过数据的哈希值, 找到虚节点, 虚节点再找真实节点.
	同理，一旦加入一个新节点，可以分配多个虚节点, 使得新节点可以负载多个原有节点的压力, 比较容易实现扩容时的负载均衡。
1.6. 将数据作为数据段, 则可以以数据段为单位管理副本, 从而副本与机器不再负相关, 每台机器都可以负责一定数据段的副本。

2.2. 基本副本协议,
2.2.1. 中心化副本控制协议,
2.2.2. primary-secondary 协议,
2.2.3. 去中心化副本控制协议, Paxos, 去中心化副本控制协议,
2.2.4. 工程投影,
2.2.4.1 GFS 中的 Primary-Secondary 协议
2.2.4.2 PNUTS 中的 Primary-Secondary 协议
2.2.4.3 Niobe 中的 Primary-Secondary 协议
2.2.4.4 Dynamo/Cassandra 的去中心化副本控制协议, Quorum 机制,
2.2.4.5 Chubby/Zookeeper 的副本控制协议,
	Chubby[13]和 Zookeeper 使用了基于 Paxos 的去中心化协议选出 primary 节点，但完成 primary节点的选举后，
	这两个系统都转为中心化的副本控制协议，即由 primary 节点负责同步更新操作到secondary 节点。
2.5. 日志技术,
2.5.1 数据库系统日志技术简述
数据库的日志主要分为 Undo Log、Redo Log、Redo/Undo Log 与 No Redo/No Undo Log。
1. Redo Log, 先写日志, 再更新内存中的数据,
2. Check point, 将内存中的数据以某种易于重新加载的数据组织方式完整的 dump 到磁盘,
从而减少宕机恢复时需要回放的日志数据.

2.5.3. No Undo/No Redo log
若数据维护在磁盘中，某批更新由若干个更新操作组成，这些更新操作需要原子生效，即要么同时生效，要么都不生效。

2.5.4.
日志技术的使用非常广泛，在 zookeeper 系统中，为了实现高效的数据访问，数据完全保存在
内存中，但更新操作的日志不断持久化到磁盘，另一方面，为了实现较快速度的宕机恢复，zookeeper
周期性的将内存数据以 checkpoint 的方式 dump 到磁盘。

MySQL 的主从库设计也是基于日志。从库只需通过回放主库的日志，就可以实现与主库的同
步。由于从库同步的速度与主库更新的速度没有强约束，这种方式只能实现最终一致性。


2.2. Lease机制,
2.3. Quorum机制,
2.4. 日志技术,
2.5. 两阶段提交协议,
2.6. MVCC 的分布式事务,
2.7. Paxos 协议,
2.8. CAP 理论,
	Consistency (一致性)：
	Availiablity(可用性)：
	Tolerance to the partition of network (分区容忍)：

可用性, 可扩展性, 一致性, 

有一个 poxos, 还有一个 raft 协议,

即文中所说的协议发生在哪里, 去中心化, 强一致性,




